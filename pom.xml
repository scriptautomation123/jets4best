<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.baml.mav</groupId>
    <artifactId>aieutil</artifactId>
    <version>1.0.0</version>
    <name>AIE Util CLI</name>
    <description>Minimal Oracle CLI utility</description>
    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <log4j2.version>2.25.1</log4j2.version>
        <jackson.version>2.19.2</jackson.version>
        <oracle.jdbc.version>23.8.0.25.04</oracle.jdbc.version>
        <h2.version>2.3.232</h2.version>
        <shade.plugin.version>3.6.0</shade.plugin.version>
        <exec.plugin.version>3.5.1</exec.plugin.version>
        <assembly.plugin.version>3.7.1</assembly.plugin.version>
        <picocli.version>4.7.7</picocli.version>
        <httpclient.version>4.5.14</httpclient.version>
        <junit.jupiter.version>5.13.4</junit.jupiter.version>
        <assertj.version>3.27.3</assertj.version>
        <maven.compiler.plugin.version>3.14.0</maven.compiler.plugin.version>
        <maven.enforcer.plugin.version>3.6.1</maven.enforcer.plugin.version>
        <maven.surefire.plugin.version>3.2.5</maven.surefire.plugin.version>
        <versions.plugin.version>2.18.0</versions.plugin.version>
    </properties>

    <!-- Centralized dependency versions -->
    <dependencyManagement>
        <dependencies>
            <!-- Logging -->
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-api</artifactId>
                <version>${log4j2.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-core</artifactId>
                <version>${log4j2.version}</version>
            </dependency>
            <!-- YAML config -->
            <dependency>
                <groupId>com.fasterxml.jackson.dataformat</groupId>
                <artifactId>jackson-dataformat-yaml</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-core</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <!-- Oracle JDBC -->
            <dependency>
                <groupId>com.oracle.database.jdbc</groupId>
                <artifactId>ojdbc8</artifactId>
                <version>${oracle.jdbc.version}</version>
            </dependency>
            <!-- H2 Database -->
            <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>${h2.version}</version>
            </dependency>
            <!-- Picocli -->
            <dependency>
                <groupId>info.picocli</groupId>
                <artifactId>picocli</artifactId>
                <version>${picocli.version}</version>
            </dependency>
            <!-- Apache HttpClient -->
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient</artifactId>
                <version>${httpclient.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpcore</artifactId>
                <version>4.4.16</version>
            </dependency>
            <dependency>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>${versions.plugin.version}</version>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter</artifactId>
                <version>${junit.jupiter.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.assertj</groupId>
                <artifactId>assertj-core</artifactId>
                <version>${assertj.version}</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!-- Your actual project dependencies (versionless, managed above) -->
    <dependencies>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-yaml</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
        </dependency>
        <dependency>
            <groupId>info.picocli</groupId>
            <artifactId>picocli</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
        </dependency>
        <!--
          Oracle JDBC driver is required at runtime for DriverManager.getConnection("jdbc:oracle:thin:...").
          It is loaded via the JDBC SPI (META-INF/services/java.sql.Driver) and may appear unused to static
        analysis tools.
          Do NOT remove this dependency even if flagged as unused.
        -->
        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc8</artifactId>
            <scope>runtime</scope>
        </dependency>
        <!--
          H2 database is used for testing and may appear unused if tests are not run or are detected only via
        reflection.
          Do NOT remove if you run tests that use H2.
        -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>
        <!--
          JUnit Jupiter is used for unit testing and may appear unused if tests are not run or are detected
        only via test runners.
          Do NOT remove if you run tests that use JUnit Jupiter.
        -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>
    <!-- Centralized plugin versions -->
    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven.compiler.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>${shade.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>${exec.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>${assembly.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>versions-maven-plugin</artifactId>
                    <version>${versions.plugin.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>${maven.enforcer.plugin.version}</version> <!-- Use a recent version -->
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>3.6.3</version>
                                </requireMavenVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                    <compilerArgs>
                        <arg>-proc:none</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
            <!-- Enable JUnit 5 platform for tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven.surefire.plugin.version}</version>
                <configuration>
                    <useModulePath>false</useModulePath>
                </configuration>
            </plugin>

            <!-- 
                shade plugin, jlink helper class and assembly plugin usage
                combine to create a fully dependnecy free uber jar with an included jre
                1. Shade Plugin: Builds Uberjar 
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <executions>
                    <execution>
                        <id>shade-uberjar</id>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <filters>
                                <filter>
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                        <exclude>META-INF/MANIFEST.MF</exclude>
                                        <exclude>META-INF/LICENSE*</exclude>
                                        <exclude>META-INF/NOTICE*</exclude>
                                        <exclude>META-INF/DEPENDENCIES</exclude>
                                        <exclude>META-INF/maven/**</exclude>
                                        <exclude>META-INF/versions/**</exclude>
                                        <exclude>module-info.class</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                            <transformers>
                                <transformer
                                    implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>com.baml.mav.aieutil.AieUtilMain</mainClass>
                                </transformer>
                                <transformer
                                    implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>


            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <phase>package</phase>
                        <configuration>
                            <descriptors>
                                <descriptor>src/main/assembly/bundle.xml</descriptor>
                            </descriptors>
                            <finalName>${project.build.finalName}</finalName>
                            <appendAssemblyId>false</appendAssemblyId>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>


    <profiles>
        <!--
      java21 profile:
      This profile enables Java 21 compilation and packaging for the CLI application. It sets the
    compiler source, target, and release to 21.

      The build section configures a special execution stage using the exec-maven-plugin to run a helper
    class (JlinkHelper) after the uberjar (shaded jar) is built.

      The correct order of build stages is critical:
      1. **Uberjar (maven-shade-plugin):** First, the application and all dependencies are packaged into
    a single, self-contained jar. This ensures that jdeps and jlink analyze the actual runtime
    classpath, including all third-party libraries.
      2. **jdeps/jlink (via exec-maven-plugin):** Next, the JlinkHelper runs jdeps to analyze the shaded
    jar and then invokes jlink to generate a minimized custom JRE containing only the modules
    required by the application. This step must run after the uberjar is created, or the analysis
    will be incomplete and the resulting JRE may be missing required modules.
      3. **Assembly (maven-assembly-plugin):** Finally, the assembly plugin can bundle the shaded jar and
    the custom JRE into a distributable archive. This must run after both the uberjar and jlink
    steps to ensure the final package is complete and runnable on any compatible system.

      This order guarantees that:
      - The custom JRE contains exactly the modules needed for the actual, dependency-included
    application.
      - The distributable bundle is portable and does not require a pre-installed JDK/JRE.
      - The build is reproducible and minimal, reducing attack surface and footprint.
    -->
        <profile>
            <id>java21</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <maven.compiler.source>21</maven.compiler.source>
                <maven.compiler.target>21</maven.compiler.target>
                <maven.compiler.release>21</maven.compiler.release>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <!-- 3. use jdeps and jlink to generate a custom jre-->
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>${exec.plugin.version}</version>
                        <executions>
                            <execution>
                                <id>run-jlink-helper</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>java</goal>
                                </goals>
                                <configuration>
                                    <mainClass>com.baml.mav.aieutil.buildhelpers.JlinkHelper</mainClass>
                                    <arguments>
                                        <argument>
                                            ${project.build.directory}/${project.build.finalName}.jar</argument>
                                        <argument>${env.JAVA_HOME}/jmods</argument>
                                        <argument>${project.build.directory}/jre</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!--
      update-release-deps profile:
      1. mvn -Pupdate-release-deps versions:display-dependency-updates
        -Dmaven.version.ignore='(?i).*-(alpha|beta|beta2|m|rc)(\d+)?'
         # Shows only stable release updates
      2. mvn -Pupdate-release-deps versions:update-properties
        -Dmaven.version.ignore='(?i).*-(alpha|beta|beta2|m|rc)(\d+)?'
         # Updates properties to latest stable releases
      3. mvn -Pupdate-release-deps versions:display-dependency-updates
        -Dmaven.version.ignore='(?i).*-(alpha|beta|beta2|m|rc)(\d+)?'
         # Confirms all are up to date
    -->
        <profile>
            <id>update-release-deps</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>versions-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>display-release-updates-pre</id>
                                <goals>
                                    <goal>display-dependency-updates</goal>
                                </goals>
                                <configuration>
                                    <ignoredVersions>(?i).*-(alpha|beta|beta2|m|rc)(\d+)?</ignoredVersions>
                                </configuration>
                            </execution>
                            <execution>
                                <id>update-release-properties</id>
                                <goals>
                                    <goal>update-properties</goal>
                                </goals>
                                <configuration>
                                    <ignoredVersions>(?i).*-(alpha|beta|beta2|m|rc)(\d+)?</ignoredVersions>
                                </configuration>
                            </execution>
                            <execution>
                                <id>display-release-updates-post</id>
                                <goals>
                                    <goal>display-dependency-updates</goal>
                                </goals>
                                <configuration>
                                    <ignoredVersions>(?i).*-(alpha|beta|beta2|m|rc)(\d+)?</ignoredVersions>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>

</project>